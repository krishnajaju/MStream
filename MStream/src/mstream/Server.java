/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mstream;

import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import javax.swing.JOptionPane;

/**
 *
 * @author adithya
 */
public class Server extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form Server
     * Waits for the server to get at least one connection from the client.
     * Ensures reliable stream receiver.
     */
    String streamName,mediaLocation,udpPort,tcpPort,multicast_address,bitRate;

    /**
     *Initializes the GUI and sets all the necessary Parameters
     * @param multicast_address: The multi cast address for the server to stream to.
     * @param udpPort: The multi cast udp stream port
     * @param mediaLocation: The local path to the selected media.
     * @param streamRate: The bit rate of the media to stream
     * @param streamName: The name of the stream
     * @param tcpPort: The tcp port at which the service runs.
     */
    public Server(String multicast_address,String udpPort,String mediaLocation,String streamRate,String streamName,String tcpPort) {
        this.multicast_address = multicast_address;
        this.udpPort = udpPort;
        this.mediaLocation = mediaLocation;
        this.bitRate = streamRate;
        this.streamName = streamName;
        this.tcpPort = tcpPort;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Waiting for Clients");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mstream/ajax-loader.gif"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(182, 182, 182)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void run() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        this.setTitle("Connecting");
        this.setLocation(800,400);
        this.setVisible(true);
        try {
            ServerSocket x = new ServerSocket(Integer.parseInt(this.tcpPort));
            Socket sock = x.accept();
            DataOutputStream dout = new DataOutputStream(sock.getOutputStream());
            String mrl = "rtp://"+multicast_address+":"+udpPort+"/"+streamName;
            dout.writeUTF(mrl);
            this.dispose();
            String options = "";
            /*
            :sout=#transcode{vcodec=none,acodec=mp3,ab=128,channels=2,samplerate=48000}:rtp{dst="+serverAddress+",port="+serverPort+",mux=ts}
            */
            //options += ":sout=#rtp{sdp=rtsp://@"+multicast_address+":"+udpPort+"/"+streamName+"}";
            options += ":sout=#transcode{vcodec=none,acodec=mp3,ab="+bitRate+",channels=2,samplerate=48000}:rtp{dst="+multicast_address+",port="+udpPort+"/"+streamName+",mux=ts,name="+streamName+"}";
            Thread server = new Thread(new sInterface(mediaLocation,options));
            server.start();
            Thread listener = new Thread(new listen(x,mrl));
            listener.start();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}